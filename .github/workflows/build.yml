name: SonarQube

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      # --- .NET Setup
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x # Ensure you have the latest stable version
          
      - uses: actions/checkout@v4
        with:
          # Required for SonarScanner to calculate changes accurately
          # Shallow clones should be disabled for a better relevancy of analysis
          fetch-depth: 0

      # --- Caching Steps ---
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-

      # --- SonarScanner Cache & Install
      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          # Using the temporary runner path for a clean install
          path: ${{ runner.temp }}\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          # The tool is installed directly into the cached location only if it's missing
          dotnet tool install --global dotnet-sonarscanner --tool-path ${{ runner.temp }}\scanner

      # --- Install dotnet-coverage Tool ---
      - name: Install dotnet-coverage
        shell: powershell
        run: dotnet tool install --global dotnet-coverage

      # --- Build, Test, and Analyze Step ---
      - name: Build, test and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          # Define the scanner path variable
          $scannerPath = "${{ runner.temp }}\scanner\dotnet-sonarscanner"

          # Define all 'begin' parameters as a single string to avoid backtick issues
          $sonarBeginParams = (
              'begin', 
              '/k:"ColanderLepus_HappyCuber"',
              '/o:"colanderlepus"',
              "/d:sonar.token=`"${{ secrets.SONAR_TOKEN }}`"",
              '/d:sonar.dotnet.excludeTestProjects=true',
              '/d:sonar.verbose=true',
              '/d:sonar.coverage.exclusions="**/obj/**"',
              '/d:sonar.cs.vscoveragexml.reportsPaths="coverage.xml"',
              #'/d:sonar.cs.opencover.reportsPaths="**\TestResults\coverage.xml"',
              '/d:sonar.cs.vstest.reportsPaths="**\TestResults\*.trx"'
          )

          # 1. Start the SonarQube analysis using array expansion
          & $scannerPath @sonarBeginParams

          # 2. Build the solution
          dotnet build --configuration Release --no-incremental

          # 3. Run tests with coverage collection
          dotnet-coverage collect `
          "dotnet test --no-build --configuration Release --logger `"trx;LogFileName=test_results.trx`"" `
          -f xml -o "coverage.xml"

          # 4. End the SonarQube analysis
          & $scannerPath end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
